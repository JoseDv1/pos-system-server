generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]

  @@map("categories")
}

model Product {
  id               String             @id @default(uuid())
  name             String
  price            Float
  stock            Int                @default(0)
  updatedAt        DateTime           @updatedAt
  categoryId       String?
  category         Category?          @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  productsOnSales  ProductsOnSales[]
  productsOnSupply ProductsOnSupply[]

  @@map("products")
}

model Provider {
  id         String   @id @default(uuid())
  name       String
  phone      String
  supplyDays String
  supplies   Supply[]

  @@map("providers")
}

model ProductsOnSupply {
  productId String
  supplyId  String
  quantity  Int     @default(1)
  unitCost  Float
  product   Product @relation(fields: [productId], references: [id])
  supply    Supply  @relation(fields: [supplyId], references: [id])

  @@id([productId, supplyId])
  @@map("products_on_supply")
}

model Supply {
  id               String             @id @default(uuid())
  totalCost        Float              @default(0)
  date             DateTime           @default(now())
  providerId       String?
  productsOnSupply ProductsOnSupply[]
  provider         Provider?          @relation(fields: [providerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@map("supplies")
}

model Client {
  id      String  @id @default(uuid())
  name    String  @unique
  address String?
  email   String? @unique
  sales   Sale[]

  @@map("clients")
}

model ProductsOnSales {
  productId String
  saleId    String
  quantity  Int     @default(1)
  unitCost  Float   @default(0)
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])

  @@id([productId, saleId])
  @@map("products_on_sales")
}

model Sale {
  id            String            @id @default(uuid())
  clientId      String
  totalCost     Float             @default(0)
  createdAt     DateTime          @default(now())
  status        Status            @default(PENDING)
  paymentMethod PaymentMethod     @default(CASH)
  saleProducts  ProductsOnSales[]
  client        Client            @relation(fields: [clientId], references: [id])
  note          String?

  @@map("sales")
}

model Employee {
  id       String @id @default(uuid())
  name     String
  password String
  role     Role   @default(USER)

  @@map("employes")
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  PAYED
}
